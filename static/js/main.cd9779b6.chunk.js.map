{"version":3,"sources":["Question.js","App.js","serviceWorker.js","index.js"],"names":["Question","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","resetContentDisplay","setState","contentDisplayed","nextQuestion","handleClick","e","currentQuestion","correctAnswer","target","innerText","updateStudyGuide","id","render","console","log","react_default","a","createElement","state","className","src","img","alt","answerList","map","answer","key","onClick","Component","App","startPractice","practiceActive","currentQuestionIndex","questionid","updatedStudyGuide","concat","toConsumableArray","studyGuideQuestions","localStorage","setItem","JSON","stringify","allQuestions","error","_this2","fetch","then","response","json","result","JHprotoPractice","catch","message","_this$state","Question_Question","Boolean","window","location","hostname","match","ReactDOM","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cd9779b6.chunk.js","sourcesContent":["import React, {Component} from 'react';\n\nexport default class Question extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      contentDisplayed: \"question\"\n    }\n  }\n\n  resetContentDisplay = () => {\n    this.setState({contentDisplayed: \"question\"}, this.props.nextQuestion)\n  }\n\n  handleClick = (e) => {\n    if(this.props.currentQuestion.correctAnswer === e.target.innerText) {\n      this.setState({contentDisplayed: \"correct\"})\n    } else {\n      this.props.updateStudyGuide(this.props.currentQuestion.id)\n      this.setState({contentDisplayed: \"incorrect\"})\n    }\n  }\n\n  render = () => {\n    console.log(\"this question\", this.props.currentQuestion)\n    return (\n      <div>\n      { this.state.contentDisplayed === \"question\" &&\n        <section className=\"question-container\">\n          <h3>Select the prototype below to insert into the highlighted section</h3> \n          <img src={this.props.currentQuestion.img} alt=\"question image\" />\n          <div>\n            { \n              this.props.currentQuestion.answerList.map(answer => {\n                return (\n                  <button className=\"answer-buttons\" key={answer} onClick={this.handleClick}>{answer}</button>)\n              })\n            }\n          </div>\n        </section>\n      }\n      { this.state.contentDisplayed === \"incorrect\" &&\n        <section className=\"incorrect-answer question-container\">\n          <p>You're wrong</p>\n          <button onClick={this.resetContentDisplay}>Next Question</button>\n        </section>\n      }\n      { this.state.contentDisplayed === \"correct\" &&\n        <section className=\"correct-answer question-container\">\n          <p>You're right!</p>\n          <button onClick={this.resetContentDisplay}>Next Question</button>\n        </section>\n      }\n      </div>\n      )\n  }\n}","import React, { Component } from 'react';\nimport Question from './Question'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      allQuestions: [],\n      studyGuideQuestions: [],\n      practiceActive: false,\n      currentQuestionIndex: 0,\n      error: '',\n    }\n  }\n\n  componentDidMount() {\n    fetch('http://memoize-datasets.herokuapp.com/api/v1/JHprotoPractice')\n    .then(response => response.json())\n    .then(result => {\n      this.setState({\n        allQuestions: result.JHprotoPractice,\n      })\n    })\n    .catch(error => {\n      this.setState({error: error.message})\n    })\n  }\n\n\n  startPractice = () => {\n    this.setState({practiceActive: true})\n  }\n\n  nextQuestion = () => {\n    //need if conditional to reset when index is more than number of questions\n    this.setState({currentQuestionIndex: this.state.currentQuestionIndex + 1})\n  }\n\n  updateStudyGuide = (questionid) => {\n    const updatedStudyGuide = [...this.state.studyGuideQuestions, questionid]\n    localStorage.setItem(\"studyGuideQuestions\", JSON.stringify(updatedStudyGuide))\n    this.setState({studyGuideQuestions: updatedStudyGuide})\n  }\n\n  render() {\n    const {allQuestions, currentQuestionIndex} = this.state\n    return (\n      <div className=\"App\">\n        {this.state.error && <p>{this.state.error}</p>}\n        <h1>ProtoPractice</h1>\n        <h2>Build your knowledge of array, object, and string prototypes!</h2>\n        <h3>For each question you'll see an image of a prototype problem with the prototype name missing. Choose the correct prototype from the answers listed below.</h3>\n        <h3>Answers missed with be added to your study guide for futher practice.</h3>\n        <button onClick={this.startPractice}>Start Practicing</button>\n        <button>Show Study Guide</button>\n        <button>Reset Study Guide</button>\n        {\n          this.state.practiceActive &&\n          <Question \n            currentQuestion={allQuestions[currentQuestionIndex]}\n            nextQuestion={this.nextQuestion}\n            updateStudyGuide={this.updateStudyGuide}\n          />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}